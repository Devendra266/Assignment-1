# -*- coding: utf-8 -*-
"""CRUD Operations on Sales Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dE19q6AIvE1Usc2pg_s0b8W7GkhcQtud
"""

import pandas as pd

df=pd.read_csv("sales_data_sample.csv",encoding='latin1')
df

# Function to save the dataframe back to the CSV file
def save_to_csv(dataframe, path):
    dataframe.to_csv(path, index=False)
    print("Dataset saved successfully.")

# Create: Insert new records into the dataset
def create_record(order_number, quantity_ordered, price_each, order_line_number, sales, order_date, status, qtr_id, month_id, year_id, address_line1, city, state, postal_code, country, territory, contact_lastname, contact_firstname, deal_size):
    new_record = pd.DataFrame({
        'ORDERNUMBER': [order_number],
        'QUANTITYORDERED': [quantity_ordered],
        'PRICEEACH': [price_each],
        'ORDERLINENUMBER': [order_line_number],
        'SALES': [sales],
        'ORDERDATE': [order_date],
        'STATUS': [status],
        'QTR_ID': [qtr_id],
        'MONTH_ID': [month_id],
        'YEAR_ID': [year_id],
        'ADDRESSLINE1': [address_line1],
        'CITY': [city],
        'STATE': [state],
        'POSTALCODE': [postal_code],
        'COUNTRY': [country],
        'TERRITORY': [territory],
        'CONTACTLASTNAME': [contact_lastname],
        'CONTACTFIRSTNAME': [contact_firstname],
        'DEALSIZE': [deal_size]
    })
    global df
    df = pd.concat([df, new_record], ignore_index=True)
    save_to_csv(df, file_path)
    print(f"Record added: {new_record.to_dict(orient='records')}")

# Read: Retrieve and display specific records from the dataset
def read_record():
    order_number = input("Enter ORDERNUMBER to search (leave blank to display all records): ").strip()

    if order_number:
        try:
            order_number = int(order_number)
            result = df[df['ORDERNUMBER'] == order_number]
            if result.empty:
                print(f"No record found with ORDERNUMBER: {order_number}")
            else:
                print(result)
        except ValueError:
            print("Invalid input. Please enter a valid ORDERNUMBER.")
    else:
        print(df)

# Update: Modify existing records in the dataset
def update_record(order_number, quantity_ordered=None, price_each=None, sales=None, status=None):
    global df
    if order_number in df['ORDERNUMBER'].values:
        if quantity_ordered:
            df.loc[df['ORDERNUMBER'] == order_number, 'QUANTITYORDERED'] = quantity_ordered
        if price_each:
            df.loc[df['ORDERNUMBER'] == order_number, 'PRICEEACH'] = price_each
        if sales:
            df.loc[df['ORDERNUMBER'] == order_number, 'SALES'] = sales
        if status:
            df.loc[df['ORDERNUMBER'] == order_number, 'STATUS'] = status
        save_to_csv(df, file_path)
        print(f"Record with ORDERNUMBER {order_number} updated.")
    else:
        print(f"No record found with ORDERNUMBER: {order_number}")

# Delete: Remove specific records from the dataset
def delete_record(order_number):
    global df
    if order_number in df['ORDERNUMBER'].values:
        df = df[df['ORDERNUMBER'] != order_number]
        save_to_csv(df, file_path)
        print(f"Record with ORDERNUMBER {order_number} deleted.")
    else:
        print(f"No record found with ORDERNUMBER: {order_number}")

read_record()

